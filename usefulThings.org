* Intrinsic Functions
  #+BEGIN_SRC haskell
  words :: String -> [String]
  unwords :: [String] -> String
  fst :: (a, b) -> a
  snd :: (a, b) -> b
  (!!) :: [a] -> Int -> a
  otherwise :: Bool -- it makes guards more readable, its always True.
  map :: (a -> b) -> [a] -> [b]
  signum :: Num a => a -> a
  (.) :: (b -> c) -> (a -> b) -> a -> c -- composition
  (:) :: a -> [a] -> [a]
  (++) :: [a] -> [a] -> [a]
  concat :: Foldable t => t [a] -> [a] -- example concat [[1, 2, 3], [4, 5, 6]]
  divMod :: Integral a => a -> a -> (a, a)
  sum :: (Num a, Foldable t) => t a -> a
  enumFromTo :: Enum a => a -> a -> [a]
  enumFromThenTo :: Enum a => a -> a -> a -> [a]
  enumFrom :: Enum a => a -> [a]
  enumFromThen :: Enum a => a -> a -> [a]
  reverse :: [a] -> [a]
  id :: a -> a
  succ :: a -> a -- successor
  pred :: a -> a -- predecessor
  take :: Int -> [a] -> [a]
  drop :: Int -> [a] -> [a]
  splitAt :: Int -> [a] -> ([a], [a])
  takeWhile :: (a -> Bool) -> [a] -> [a]
  dropWhile :: (a -> Bool) -> [a] -> [a]
  head :: [a] -> [a]
  last :: [a] -> a
  tail :: [a] -> [a]
  elem :: Eq a => a -> [a] -> Bool
  fmap :: Functor f => (a -> b) -> f a -> f b
  minimum :: (Ord a , Foldable t) => t a -> a
  bool :: a -> a -> Bool -> a
  product :: (Num a, Foldable t) => t a -> a
  zip :: [a] -> [b] -> [(a, b)]
  unzip :: [(a,b)] -> [[a], [b]]
  zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
  isUpper :: Char -> Bool
  toUpper : Char -> Char
  and :: Foldable t => t Bool -> Bool
  any :: Foldable t => (a -> Bool) -> t a -> Bool
  all :: Foldable t => (a -> Bool) -> t a -> Bool
  foldr :: Foldable t => (a -> b -> b) -> b -> t a -> b
  repeat :: a -> [a]
  scanr :: (a -> b -> c) -> b -> [a] -> [b]
  scanl :: (b -> a -> b) -> b -> [a] -> [b]
  foldr :: Foldable t => (a -> b -> b) -> b -> t a -> b
  foldl :: Foldable t => (b -> a -> b) -> b -> t a -> b
  flip :: (a -> b -> c) -> b -> a -> c
  minBound :: Bounded a => a
  maxBound :: Bounded a => a
  partition :: (a -> Bool) -> [a] -> ([a], [a])

  #+END_SRC

* Other
  - case of
  #+BEGIN_SRC haskell
   funcZ x =
     case x + 1 == 1 of
       True -> "AWESOME"
       False -> "wut"
  #+END_SRC
- Maybe
  #+BEGIN_SRC haskell
  data Maybe a = Nothing | Just a
  #+END_SRC

- let in
  #+BEGIN_SRC haskell
  myMinimumBy :: (a -> a -> Ordering) -> [a] -> a
  myMinimumBy _ (x:[]) = x
  myMinimumBy f (x:xs) =
  let
    y = myMinimumBy f xs
  in
    case f x y of
      LT -> x
      _  -> y

  #+END_SRC

- if then else

- where
* Pragma
  {-# LANGUAGE GeneralizedNewtypeDeriving,
  FlexibleInstances #-}
* GHCI
  :t
  :i
  :k
  :sprint
